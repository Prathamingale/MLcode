import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

pip install graphviz

df=pd.read_csv("Admission_Predict .csv")
df

df.columns

df.shape

df.columns = df.columns.str.rstrip() 

df.columns

df.loc[df['Chance of Admit'] >=0.80, 'Chance of Admit']=1
df.loc[df['Chance of Admit'] < 0.80, 'Chance of Admit']=0

df['Chance of Admit']

df

df=df.drop('Serial No.', axis=1)

df

x = df.iloc [ :,0:7].values
y = df.iloc [:,7].values

y

from sklearn.model_selection import StratifiedKFold, cross_val_score

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.25, random_state=0)

print(x_train.shape,end='')
print(x_test.shape)

model = DecisionTreeClassifier (criterion = 'entropy')
model.fit(x_train , y_train)
model

y_pred=model.predict(x_test)

matrix=confusion_matrix(y_test,y_pred,labels=[0.0,1.0])

matrix

acc = accuracy_score(y_test,y_pred)
print('Accuracy of Decision Tree Model =', acc)

from sklearn.metrics import classification_report
cr=classification_report(y_test,y_pred)
print('Classification Report ', cr)

feature_names = df.columns[0:7]
print(feature_names,end='')

class_names=[str(x) for x in model.classes_]

class_names

from sklearn.tree import plot_tree

fig=plt.figure(figsize=(50,30))

plot_tree(model,feature_names=feature_names,class_names=class_names,filled=True)

plt.savefig('Tree_visualization.png')

import graphviz

from sklearn import tree

dot_data=tree.export_graphviz(model,out_file=None,feature_names=feature_names,class_names=class_names,filled=True)

#graph=graphviz.Source(dot_data,format='png')

#graph

sf= StratifiedKFold(n_splits=5,shuffle=True,random_state=0)

depth=[1,2,3,4,5,6,7,8,9,10]

for d in depth:
    score=cross_val_score(tree.DecisionTreeClassifier(criterion='entropy',max_depth=d,random_state=0),x_train,y_train,cv=sf,scoring='accuracy')
    print('Average score for depth {} is : {}'.format(d,score.mean()))

score.mean()
